include:
  - local: '.gitlab-ci-template.yml'
  - project: clops/gitlab-ci-pop-analysis
    ref: master
    file: pop_analysis.yaml
  - project: releng/common-gitlab-ci
    ref: master
    file: sbom-generate.yml
  - project: altair/altair-build-common
    ref: master
    file: gitlab/ci/altair_versioning.yml
  - project: altair/altair-build-common
    ref: master
    file: gitlab/ci/altair_common.yml

# List of job stages in their order of execution.
stages:
  - build
  - coverage_report
  - versioning
  - analysis
  - sbom
  - publish
  - e2e
  - notification

variables:
  BUILD_TOOL: npm
  GIT_DEPTH: 10
  BD_PRODUCT_GROUP: PolarisNG Projects Group
  BD_VERSION_PHASE: DEVELOPMENT
  PUBLISHER_ID: E2Etest
  ORG_NAME : centralintegrations
  TESTNG_FAILED_XML: test-output/testng-failed.xml
  DISABLE_POLARIS_CLASSIC_ANALYSIS: "true"


##### MERGE REQUEST PIPELINE #####

build_unit_test_job:
  extends:
    - .build_unit_tests
  stage: build

code_coverage_job:
  stage: coverage_report
  extends:
    -  .code_coverage

#check_dist_job:
#  extends:
#    - .check_dist
#  stage: Check_dist


.export_sbom_variables:
  before_script:
    - export EXT_VERSION=$(cat vss-extension.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
    - export ARTIFACTORY_UPLOAD_REPO=1
    - export SBOM_ART_TOKEN_VAULT_PATH=sbom/integrations/synopsys-extension-ci-cd
    - export PRODUCT=Integrations
    - export GENERATE_CONFIGURATION_FILE=1
    - export PRODUCT_ADDON_SBOM_OPTIONS="--output-zipfile synopsys-extension-ci-cd-$EXT_VERSION.zip --debug"
    - export GENERATION_OPTIONS="--entry integrations/mirrored-repos/synopsys-extension-ci-cd:synopsys-extension-ci-cd-$EXT_VERSION"

generate_sbom:
  extends:
    - .export_sbom_variables
    - .run_sbom_generation
  stage: sbom
  only:
    refs:
      - main

polaris_bridge:
  stage: analysis
  extends: .polaris_bridge

pop_blackduck:
  image: gcr.io/snps-polaris-ops-prod/ember_cli:3.28.5-node_16.14
  variables:
    POP_BLACKDUCK_INPROGRESS: 1
  extends:
    - .new_pop_blackduck
  before_script:
    - |
      apt-get update -y
      apt-get install -y rsync make jq python3 python3-pip
      pip3 install blackduck requests
      export RELEASE_VERSION=$(cat vss-extension.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')

publish:
  stage: publish
  tags:
    - linux
  before_script: 
    - apt-get update && apt-get install -y ca-certificates gnupg uuid-runtime jq
    - curl -sL https://deb.nodesource.com/setup_20.x | bash
    - apt-get install -y nodejs
    - npm install -g npm@10.2.4
    - node -v
    - npm version
    - npm install -g tfx-cli 
  script:
    - uuid=$(uuidgen)
    - echo $uuid
    - t=$(date +"%s")
    - echo $t
    - name="Synopsys-security-scan-"$t
    - echo $name
    - echo "EXTENSION_NAME=$name" >> build.env
    - vss_extension=$(cat vss-extension.json)
    - vss_extension=$(echo $vss_extension | jq ".id = \"$name\"")
    - vss_extension=$(echo $vss_extension | jq ".name = \"$name\"")
    - vss_extension=$(echo $vss_extension | jq ".publisher = \"$PUBLISHER_ID\"")
    - vss_extension=$(echo $vss_extension | jq ".public = false")
    - azure_extension_version=$(echo $vss_extension | jq -r '.version')
    - echo "AZURE_EXTENSION_VERSION=$azure_extension_version" >> build.env
    - rm vss-extension.json
    - echo $vss_extension > vss-extension.json
    - cd synopsys-task
    - task_json=$(cat task.json)
    - task_json=$(echo $task_json | jq ".name = \"$name\"")
    - task_json=$(echo $task_json | jq ".id = \"$uuid\"")
    - rm task.json
    - echo $task_json > task.json
    - npm install
    - npm run all
    - rm -rf node_modules
    - cd ..
    - tfx extension create --manifest-globs vss-extension.json
    - tfx extension publish --manifest-globs vss-extension.json --share-with $ORG_NAME --token $USER_INSTALL_TOKEN
  artifacts:
    reports:
      dotenv: build.env     


e2e:
  stage: e2e
  dependencies: [publish]
  tags:
    - linux
  before_script:
    - apt-get update && apt-get install -y openjdk-11-jdk
    - curl -sL https://aka.ms/InstallAzureCLIDeb | bash
    - az devops extension install --extension-id $EXTENSION_NAME --publisher-id $PUBLISHER_ID --organization https://dev.azure.com/$ORG_NAME

  script:
    - echo "Run e2e tests"
    - curl -L $URL -o $JAR_NAME
    - echo "scm=azure" >> /tmp/test.properties
    - echo "runner=Linux" >> /tmp/test.properties
    - echo "runner.os=Linux" >> /tmp/test.properties
    - echo "azure.extension.name=$EXTENSION_NAME" >> /tmp/test.properties
    - echo "azure.version=$AZURE_EXTENSION_VERSION" >> /tmp/test.properties
    - echo "Xml path for E2E Tests is $XML_PATH_IN_JAR"
    - echo "pipeline=true" >> /tmp/test.properties
    - cat /tmp/test.properties
    - pwd  && ls -la
    - cat /tmp/test.properties
    - java -enableassertions -DPropertyManager.file=/tmp/test.properties -jar $JAR_NAME -testjar $JAR_NAME  -xmlpathinjar $XML
  after_script:
    - az devops extension uninstall --extension-id $EXTENSION_NAME --publisher-id $PUBLISHER_ID --organization https://dev.azure.com/$ORG_NAME --yes
    - curl --location --request DELETE "https://marketplace.visualstudio.com/_apis/gallery/publishers/$PUBLISHER_ID/extensions/$EXTENSION_NAME" --header "Accept:api-version=7.2-preview.2" --header "Authorization:Basic $PUBLISHER_BASIC_AUTH"
    - |
      if [[ -f "$TESTNG_FAILED_XML" ]]; then
        echo "E2E Tests have failed for Bridge Integrations, please check the logs for the complete details."
        exit 1
      else
        echo "All E2E tests for Bridge Integrations have passed Successfully."
      fi 
