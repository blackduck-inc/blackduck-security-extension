name: upgrade-extension-version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'EXTENSION VERSION'
        required: true
        default: ""
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  upgrade-extension-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: cd blackduck-security-task && npm ci

      - name: Rebuild the dist/ directory
        run: cd blackduck-security-task && npm run build && npm run package

      - name: Compare the expected and actual dist/ directories
        run: |
          cd blackduck-security-task
          if [ "$(git diff --ignore-space-at-eol dist/ | wc -l)" -gt "0" ]; then
            echo "Detected uncommitted changes after build.  See status below:"
            git diff
            exit 1
          fi
        id: diff

      - name: versioning
        id: version-update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          extension_name=$(jq -r '.name' < vss-extension.json) 
          echo "EXTENSION_NAME=$extension_name" >> $GITHUB_ENV
          echo "EXTENSION NAME: "$extension_name
          input_version=${{ github.event.inputs.version }}
          current_version=$(echo "$input_version" | sed 's/^v//')
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV
          echo "CURRENT EXTENSION VERSION: " $current_version
          
          current_major=$(echo $current_version | awk -F. '{print $1}')
          current_minor=$(echo $current_version | awk -F. '{print $2}')
          current_patch=$(echo $current_version | awk -F. '{print $3}')
          
          new_version=$current_version
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "New version to update: ${new_version}"

      - name: update extension version in files
        id: update-extension-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating extension version in vss-extension.json, vss-extension-dev.json, package.json, package-lock.json & task.json files"
          git config --local user.name "$(git log -n 1 --pretty=format:%an)"
          git config --local user.email "$(git log -n 1 --pretty=format:%ae)"
          git config set advice.addIgnoredFile false
          
          BRANCH_NAME="extension_version_update_${{ env.NEW_VERSION }}"
          git checkout -b "$BRANCH_NAME"
          
          echo "Updating vss-extension.json with the new version: ${{ env.NEW_VERSION }}"
          jq --arg new_version "${{ env.NEW_VERSION }}" '.version = $new_version' vss-extension.json > vss-extension.json.tmp && mv vss-extension.json.tmp vss-extension.json
          echo "Updated vss-extension.json file"
          
          echo "Updating vss-extension-dev.json with the new version: ${{ env.NEW_VERSION }}"
          jq --arg new_version "${{ env.NEW_VERSION }}" '.version = $new_version' vss-extension-dev.json > vss-extension-dev.json.tmp && mv vss-extension-dev.json.tmp vss-extension-dev.json
          echo "Updated vss-extension-dev.json file"
          
          cd blackduck-security-task
          echo "Updating package.json with the new version: ${{ env.NEW_VERSION }}"
          jq --arg new_version "${{ env.NEW_VERSION }}" '.version = $new_version' package.json > package.json.tmp && mv package.json.tmp package.json
          echo "Updated package.json file"
          
          current_major=$(echo ${{ env.NEW_VERSION }} | awk -F. '{print $1}')
          current_minor=$(echo ${{ env.NEW_VERSION }} | awk -F. '{print $2}')
          current_patch=$(echo ${{ env.NEW_VERSION }} | awk -F. '{print $3}')
          
          echo "Updating task.json with the new version: ${{ env.NEW_VERSION }}"
          jq --argjson major "$current_major" --argjson minor "$current_minor" --argjson patch "$current_patch" '(.version.Major = $major) | (.version.Minor = $minor) | (.version.Patch = $patch)' task.json > task.json.tmp && mv task.json.tmp task.json
          echo "Updated task.json file"
          
          echo "Installing dependencies and rebuilding"
          npm install
          
          echo "Rebuilding after version update"
          npm run build && npm run package
          
          cd ..
          echo "Adding updated files to git"
          git add vss-extension.json vss-extension-dev.json extension_version.txt
          git add blackduck-security-task/package.json blackduck-security-task/package-lock.json blackduck-security-task/task.json blackduck-security-task/dist/
          
          git commit -am "upgrade extension version to ${{ env.NEW_VERSION }} [skip ci]"
          git push origin "$BRANCH_NAME" --force
          
          gh pr create --base ${{ github.event.repository.default_branch }} --head "$BRANCH_NAME" --title "Extension version upgrade to ${{ env.NEW_VERSION }}" --body "${{ env.EXTENSION_NAME }} version upgrade to ${{ env.NEW_VERSION }}" --fill
          
          echo "Successfully updated extension version in all files..."