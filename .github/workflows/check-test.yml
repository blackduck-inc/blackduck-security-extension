# Workflow: Checks unit tests for the project. Fails if any tests do not pass.
name: Check Unit Tests

on:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install dependencies
        run: cd blackduck-security-task && npm ci

      - name: Run tests and collect results
        id: results
        run: |
          cd blackduck-security-task
          npx nyc --reporter=json-summary mocha --reporter json --require ts-node/register "test/unit/**/*.spec.ts" > test.json 2> mocha.log
          for k in passes failures tests; do echo "$k=$(sed -n '/^{/,$p' test.json | jq -r ".stats.$k")" >> $GITHUB_OUTPUT; done
          echo "lines=$(jq -r '.total.lines.pct' coverage/coverage-summary.json)" >> $GITHUB_OUTPUT

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: blackduck-security-task/test.json

      - name: Upload coverage summary
        uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          path: blackduck-security-task/coverage/coverage-summary.json

      - name: Comment results on PR
        run: |
          PR=$(jq -r .pull_request.number $GITHUB_EVENT_PATH)
          LINES=$(jq '.total.lines.pct' blackduck-security-task/coverage/coverage-summary.json)
          {
            echo "| File | % Stmts | % Branch | % Funcs | % Lines |"
            echo "|------|---------|----------|---------|---------|"
            jq -r '.total as $t | ["All files", ($t.statements.pct | tostring), ($t.branches.pct | tostring), ($t.functions.pct | tostring), ($t.lines.pct | tostring)] | "| " + join(" | ") + " |"' blackduck-security-task/coverage/coverage-summary.json
            jq -r 'to_entries[] | select(.key != "total") | [(.key | gsub("^.*/src/"; "src/")), (.value.statements.pct | tostring), (.value.branches.pct | tostring), (.value.functions.pct | tostring), (.value.lines.pct | tostring)] | "| " + join(" | ") + " |"' blackduck-security-task/coverage/coverage-summary.json
          } > coverage-table.md
          BODY="## Test & Coverage Results

          ![ Tests ](https://img.shields.io/badge/tests-${{ steps.results.outputs.passes }}_passed_${{ steps.results.outputs.failures }}_failed-blue)
          ![Coverage](https://img.shields.io/badge/coverage-${LINES}%25-brightgreen)

          <details>
          <summary><strong>Full Coverage Details</strong></summary>

          $(cat coverage-table.md)

          </details>"
          CID=$(gh api repos/${{ github.repository }}/issues/$PR/comments --jq '.[] | select(.body|contains("## Test & Coverage Results")) | .id' | head -n1)
          for OLD_CID in $CID; do
            gh api repos/${{ github.repository }}/issues/comments/$OLD_CID -X DELETE
          done
          gh api repos/${{ github.repository }}/issues/$PR/comments -f body="$BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
